apply plugin: 'google-test-test-suite'
apply plugin: 'edu.wpi.first.GradleRIO'
// apply plugin: TinkerboardPlugin
toolchainsPlugin.withRaspbian()

deploy {
    targets {
        target('coprocessor') {
            directory = '/home/nvidia'
            locations {
                // Change this if you've changed the target hostname, username or password.
                ssh {
                    address = '10.26.79.25' // Direct connect
                    user = 'vision'
                    password = 'vision'
                }
            }
            failOnMissing = false
        }
    }

    artifacts {
//        nativeArtifact('vision') {
//            targetPlatform = project.hasProperty('raspberry') ? wpi.platforms.raspbian : //TinkerboardPlugin.tinkerboardPlatform
//
//                    targets << 'coprocessor'
//            component = 'cjFrcVision'
//            buildType = 'debug'
//
//            predeploy << { execute('sudo systemctl stop vision || true') }
//            // Make sure we can run our program!
//            postdeploy << { execute('chmod +x cjFrcVision'); execute('sudo systemctl restart vision || true') }
//        }

        // Some extra stuff for our vision program. Includes system configs, also!
        fileTreeArtifact('vision') {
            targets << 'coprocessor'
            files = rootProject.fileTree(dir: 'vision')
            directory = '/home/vision/processing'

            predeploy << {
                execute('sudo systemd vision stop')
            }
            postdeploy << {
                execute('sudo ln -f /home/vision/processing/resources/system/vision.service /etc/systemd/system')
                execute('mkdir /home/vision/processing/build')
                execute('cd /home/vision/processing/build; rm -rf ./*; cmake ../ ; make')
                execute('sudo systemctl daemon-reload; sudo systemctl enable vision')
                execute('sudo systemctl daemon-reload; sudo service vision restart; sudo service vision status')
            }
        }
    }
}